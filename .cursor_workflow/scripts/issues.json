[
  {
    "id": "US-001",
    "title": "モノレポ初期設定",
    "sprint": "Sprint-0",
    "epic": "プロジェクト基盤構築",
    "priority": "P0",
    "points": 3,
    "story": "開発者として、モノレポ構成でプロジェクトをセットアップしたい。そうすることで、backend、frontend、infraを一元管理できる。",
    "acceptance": ["ルートpackage.jsonにworkspaces設定", "backend、frontend、infraディレクトリ作成", "各ディレクトリにpackage.json作成", "TypeScript設定ファイル作成", ".gitignore、.gitattributes設定", "README.md作成"],
    "dependencies": []
  },
  {
    "id": "US-002",
    "title": "Biome設定",
    "sprint": "Sprint-0",
    "epic": "プロジェクト基盤構築",
    "priority": "P0",
    "points": 2,
    "story": "開発者として、Biomeを使用してコードフォーマットとLintを統一したい。そうすることで、コード品質を保てる。",
    "acceptance": ["biome.json作成", "Google TypeScript Style Guideに準拠", "npm scriptsにlint、formatコマンド追加", "全パッケージでBiome動作確認"],
    "dependencies": []
  },
  {
    "id": "US-003",
    "title": "バックエンド基本構成",
    "sprint": "Sprint-0",
    "epic": "プロジェクト基盤構築",
    "priority": "P0",
    "points": 3,
    "story": "開発者として、Expressサーバーの基本構成を作成したい。そうすることで、tRPCエンドポイントを提供できる。",
    "acceptance": ["Expressサーバーが起動する", "tRPCの基本設定が完了している", "ローカル環境で動作確認できる", "環境変数の管理ができる"],
    "dependencies": ["US-001"]
  },
  {
    "id": "US-004",
    "title": "Prisma初期設定",
    "sprint": "Sprint-0",
    "epic": "プロジェクト基盤構築",
    "priority": "P0",
    "points": 3,
    "story": "開発者として、Prismaを使用してデータベーススキーマを管理したい。そうすることで、型安全なデータベース操作ができる。",
    "acceptance": ["prisma/schema.prisma作成", "全5テーブル定義", "PostgreSQLにマイグレーション実行", "Prisma Clientが生成される"],
    "dependencies": ["US-003"]
  },
  {
    "id": "US-005",
    "title": "フロントエンド基本構成",
    "sprint": "Sprint-0",
    "epic": "プロジェクト基盤構築",
    "priority": "P0",
    "points": 5,
    "story": "開発者として、React + Viteのフロントエンド環境を構築したい。そうすることで、モダンなSPAを開発できる。",
    "acceptance": ["Vite + Reactプロジェクトが起動する", "TypeScript設定完了", "Tailwind CSS設定完了", "React Routerの基本設定完了", "tRPCクライアント設定完了"],
    "dependencies": ["US-001"]
  },
  {
    "id": "US-006",
    "title": "shadcn/ui導入",
    "sprint": "Sprint-0",
    "epic": "プロジェクト基盤構築",
    "priority": "P1",
    "points": 3,
    "story": "開発者として、shadcn/uiを導入してUIコンポーネントを使用したい。そうすることで、美しいUIを効率的に構築できる。",
    "acceptance": ["shadcn/ui初期設定完了", "基本コンポーネント追加", "components/ui/ディレクトリ作成", "サンプルページで動作確認"],
    "dependencies": ["US-005"]
  },
  {
    "id": "US-014",
    "title": "RDS開発環境構築",
    "sprint": "Sprint-0",
    "epic": "プロジェクト基盤構築",
    "priority": "P0",
    "points": 5,
    "story": "開発者として、ローカル開発用のPostgreSQLデータベースをセットアップしたい。そうすることで、開発環境で動作確認できる。",
    "acceptance": ["ローカルPostgreSQLインストール", "kazikashikaデータベース作成", "Prismaマイグレーション実行", "接続確認"],
    "dependencies": ["US-004"]
  },
  {
    "id": "US-007",
    "title": "AWS Cognito User Pool作成",
    "sprint": "Sprint-1",
    "epic": "認証基盤",
    "priority": "P0",
    "points": 5,
    "story": "開発者として、AWS Cognito User Poolを作成したい。そうすることで、ユーザー認証機能を提供できる。",
    "acceptance": ["Cognito User Pool作成", "User Pool Clientアプリ作成", "パスワードポリシー設定", "メール検証設定", "User Pool IDとClient IDを環境変数に設定"],
    "dependencies": []
  },
  {
    "id": "US-008",
    "title": "Cognito JWT検証実装",
    "sprint": "Sprint-1",
    "epic": "認証基盤",
    "priority": "P0",
    "points": 3,
    "story": "バックエンド開発者として、Cognitoから発行されたJWTを検証したい。そうすることで、認証済みユーザーのみAPIアクセスを許可できる。",
    "acceptance": ["aws-jwt-verifyパッケージ導入", "utils/cognito.ts作成", "verifyCognitoToken関数実装", "tRPCコンテキストでJWT検証", "protectedProcedure実装"],
    "dependencies": ["US-007"]
  },
  {
    "id": "US-009",
    "title": "フロントエンドAmplify統合",
    "sprint": "Sprint-1",
    "epic": "認証基盤",
    "priority": "P0",
    "points": 5,
    "story": "フロントエンド開発者として、AWS AmplifyでCognito認証を統合したい。そうすることで、ユーザー登録・ログイン機能を実装できる。",
    "acceptance": ["aws-amplifyパッケージ導入", "lib/amplify.ts作成", "Cognito設定", "features/auth/hooks/useAuth.ts作成", "認証状態管理実装"],
    "dependencies": ["US-007"]
  },
  {
    "id": "US-010",
    "title": "ユーザー登録画面",
    "sprint": "Sprint-1",
    "epic": "認証基盤",
    "priority": "P0",
    "points": 5,
    "story": "新規ユーザーとして、メールアドレスとパスワードでアカウントを登録したい。そうすることで、アプリを使い始めることができる。",
    "acceptance": ["/registerページ作成", "フォーム実装", "React Hook Form + Zod バリデーション", "Amplify signUp()呼び出し", "成功時確認画面へ遷移", "エラーハンドリング"],
    "dependencies": ["US-009"]
  },
  {
    "id": "US-011",
    "title": "メール確認画面",
    "sprint": "Sprint-1",
    "epic": "認証基盤",
    "priority": "P0",
    "points": 3,
    "story": "新規ユーザーとして、メールで受信した確認コードを入力したい。そうすることで、メールアドレスを検証できる。",
    "acceptance": ["/confirm-emailページ作成", "確認コード入力フォーム実装", "Amplify confirmSignUp()呼び出し", "成功時tRPC auth.createUserでDB登録", "/app/team-setupへ遷移"],
    "dependencies": ["US-010", "US-013"]
  },
  {
    "id": "US-012",
    "title": "ログイン画面",
    "sprint": "Sprint-1",
    "epic": "認証基盤",
    "priority": "P0",
    "points": 3,
    "story": "既存ユーザーとして、メールアドレスとパスワードでログインしたい。そうすることで、アプリを使用できる。",
    "acceptance": ["/loginページ作成", "フォーム実装", "Amplify signIn()呼び出し", "成功時適切なページへリダイレクト", "エラーハンドリング"],
    "dependencies": ["US-009", "US-013"]
  },
  {
    "id": "US-013",
    "title": "認証ルーターAPI実装",
    "sprint": "Sprint-1",
    "epic": "認証基盤",
    "priority": "P0",
    "points": 3,
    "story": "バックエンド開発者として、認証関連のtRPC APIを実装したい。そうすることで、ユーザー情報の管理ができる。",
    "acceptance": ["trpc/routers/auth.ts作成", "auth.createUser実装", "auth.me実装", "auth.updateUsername実装", "ルートルーターに統合"],
    "dependencies": ["US-008"]
  },
  {
    "id": "US-015",
    "title": "チーム作成API実装",
    "sprint": "Sprint-2",
    "epic": "チーム管理",
    "priority": "P0",
    "points": 5,
    "story": "バックエンド開発者として、チーム作成APIを実装したい。そうすることで、ユーザーがチームを作成できる。",
    "acceptance": ["trpc/routers/team.ts作成", "team.create実装", "招待コード生成", "デフォルト家事10種類を自動作成", "ユーザーのteamIdを更新"],
    "dependencies": ["US-013"]
  },
  {
    "id": "US-016",
    "title": "チーム参加API実装",
    "sprint": "Sprint-2",
    "epic": "チーム管理",
    "priority": "P0",
    "points": 3,
    "story": "バックエンド開発者として、チーム参加APIを実装したい。そうすることで、ユーザーが招待コードでチームに参加できる。",
    "acceptance": ["team.join実装", "招待コードでチーム検索", "ユーザーのteamIdを更新", "既にチーム所属の場合はエラー"],
    "dependencies": ["US-013"]
  },
  {
    "id": "US-017",
    "title": "チーム情報取得API実装",
    "sprint": "Sprint-2",
    "epic": "チーム管理",
    "priority": "P0",
    "points": 2,
    "story": "バックエンド開発者として、チーム情報取得APIを実装したい。そうすることで、チーム名や招待コードを表示できる。",
    "acceptance": ["team.get実装", "team.getMembers実装", "チーム所属チェック"],
    "dependencies": ["US-013"]
  },
  {
    "id": "US-018",
    "title": "チームセットアップ画面",
    "sprint": "Sprint-2",
    "epic": "チーム管理",
    "priority": "P0",
    "points": 5,
    "story": "新規ユーザーとして、チームを作成または参加したい。そうすることで、チームメンバーと家事を共有できる。",
    "acceptance": ["/app/team-setupページ作成", "チーム作成フォーム実装", "チーム参加フォーム実装", "tRPC team.create/join呼び出し", "成功時オンボーディングへ遷移"],
    "dependencies": ["US-015", "US-016"]
  },
  {
    "id": "US-019",
    "title": "家事リスト取得API実装",
    "sprint": "Sprint-2",
    "epic": "家事管理",
    "priority": "P0",
    "points": 3,
    "story": "バックエンド開発者として、家事リスト取得APIを実装したい。そうすることで、チームの家事とユーザーのストレス度を表示できる。",
    "acceptance": ["trpc/routers/chore.ts作成", "chore.list実装", "チームの家事リスト取得", "ユーザーのストレス度を含める"],
    "dependencies": ["US-013"]
  },
  {
    "id": "US-020",
    "title": "ストレス度一括設定API実装",
    "sprint": "Sprint-2",
    "epic": "家事管理",
    "priority": "P0",
    "points": 3,
    "story": "バックエンド開発者として、ストレス度一括設定APIを実装したい。そうすることで、オンボーディング時に全家事のストレス度を保存できる。",
    "acceptance": ["chore.setStressLevels実装", "複数のストレス度を一括upsert", "バリデーション（1〜5）"],
    "dependencies": ["US-013"]
  },
  {
    "id": "US-021",
    "title": "オンボーディング画面",
    "sprint": "Sprint-2",
    "epic": "家事管理",
    "priority": "P0",
    "points": 8,
    "story": "新規ユーザーとして、デフォルト家事に対するストレス度を設定したい。そうすることで、自分に合ったポイント計算ができる。",
    "acceptance": ["/app/onboardingページ作成", "家事を1つずつ表示", "ストレス度選択UI（1〜5）", "プログレスバー表示", "tRPC chore.listで家事取得", "tRPC chore.setStressLevels呼び出し", "完了時/app/homeへ遷移"],
    "dependencies": ["US-019", "US-020"]
  },
  {
    "id": "US-022",
    "title": "家事追加API実装",
    "sprint": "Sprint-2",
    "epic": "家事管理",
    "priority": "P1",
    "points": 3,
    "story": "バックエンド開発者として、家事追加APIを実装したい。そうすることで、ユーザーがカスタム家事を追加できる。",
    "acceptance": ["chore.create実装", "家事名とストレス度を受け取る", "Choreレコード作成", "UserChoreStressレコード作成"],
    "dependencies": ["US-013"]
  },
  {
    "id": "US-023",
    "title": "家事編集API実装",
    "sprint": "Sprint-2",
    "epic": "家事管理",
    "priority": "P1",
    "points": 3,
    "story": "バックエンド開発者として、家事編集APIを実装したい。そうすることで、家事名やストレス度を変更できる。",
    "acceptance": ["chore.updateName実装", "chore.updateStressLevel実装", "チームの家事かチェック"],
    "dependencies": ["US-013"]
  },
  {
    "id": "US-024",
    "title": "ホーム画面（家事リスト表示）",
    "sprint": "Sprint-2",
    "epic": "家事管理",
    "priority": "P0",
    "points": 5,
    "story": "ユーザーとして、家事リストを表示したい。そうすることで、完了すべき家事を確認できる。",
    "acceptance": ["/app/homeページ作成", "tRPC chore.list呼び出し", "家事リスト表示", "各家事に完了ボタン表示", "ローディング状態表示"],
    "dependencies": ["US-019"]
  },
  {
    "id": "US-025",
    "title": "家事管理画面",
    "sprint": "Sprint-2",
    "epic": "家事管理",
    "priority": "P1",
    "points": 5,
    "story": "ユーザーとして、家事を追加・編集したい。そうすることで、家庭に合わせた家事リストを作成できる。",
    "acceptance": ["/app/choresページ作成", "家事リスト表示", "新しい家事を追加ボタン", "家事追加モーダル実装", "家事編集モーダル実装"],
    "dependencies": ["US-019", "US-022", "US-023"]
  },
  {
    "id": "US-026",
    "title": "ポイント計算ユーティリティ実装",
    "sprint": "Sprint-3",
    "epic": "家事記録",
    "priority": "P0",
    "points": 2,
    "story": "バックエンド開発者として、ポイント計算ロジックを実装したい。そうすることで、正確なポイントを計算できる。",
    "acceptance": ["utils/pointCalculator.ts作成", "calculatePoints関数実装", "バリデーション実装", "ユニットテスト作成（カバレッジ100%）"],
    "dependencies": []
  },
  {
    "id": "US-027",
    "title": "家事記録API実装",
    "sprint": "Sprint-3",
    "epic": "家事記録",
    "priority": "P0",
    "points": 5,
    "story": "バックエンド開発者として、家事記録APIを実装したい。そうすることで、家事完了記録とポイント計算ができる。",
    "acceptance": ["trpc/routers/choreLog.ts作成", "choreLog.create実装", "ストレス度取得", "ポイント計算", "ChoreLogレコード作成"],
    "dependencies": ["US-026"]
  },
  {
    "id": "US-028",
    "title": "家事記録モーダル実装",
    "sprint": "Sprint-3",
    "epic": "家事記録",
    "priority": "P0",
    "points": 5,
    "story": "ユーザーとして、家事完了時に時間を入力したい。そうすることで、ポイントを獲得できる。",
    "acceptance": ["時間入力モーダルコンポーネント作成", "選択肢ボタン実装", "自由入力欄実装", "tRPC choreLog.create呼び出し", "獲得ポイントをトースト通知表示"],
    "dependencies": ["US-027", "US-029"]
  },
  {
    "id": "US-029",
    "title": "Zustandストア実装（UIステート）",
    "sprint": "Sprint-3",
    "epic": "家事記録",
    "priority": "P0",
    "points": 2,
    "story": "開発者として、モーダルの開閉状態を管理したい。そうすることで、UI状態を適切に管理できる。",
    "acceptance": ["stores/uiStore.ts作成", "isChoreLogModalOpen状態管理", "selectedChoreId状態管理", "開閉関数実装"],
    "dependencies": []
  },
  {
    "id": "US-030",
    "title": "期間計算ユーティリティ実装",
    "sprint": "Sprint-3",
    "epic": "ダッシュボード",
    "priority": "P0",
    "points": 2,
    "story": "バックエンド開発者として、期間計算ロジックを実装したい。そうすることで、ランキングを期間でフィルタできる。",
    "acceptance": ["utils/dateRange.ts作成", "getDateRange関数実装", "今週=過去7日間", "今月=当月1日から本日"],
    "dependencies": []
  },
  {
    "id": "US-031",
    "title": "ランキング取得API実装",
    "sprint": "Sprint-3",
    "epic": "ダッシュボード",
    "priority": "P0",
    "points": 5,
    "story": "バックエンド開発者として、ランキング取得APIを実装したい。そうすることで、チームメンバーのポイントランキングを表示できる。",
    "acceptance": ["trpc/routers/dashboard.ts作成", "dashboard.getRanking実装", "期間フィルタリング", "チームメンバーのポイント集計", "ランキングソート"],
    "dependencies": ["US-030"]
  },
  {
    "id": "US-032",
    "title": "貢献度取得API実装",
    "sprint": "Sprint-3",
    "epic": "ダッシュボード",
    "priority": "P0",
    "points": 3,
    "story": "バックエンド開発者として、貢献度取得APIを実装したい。そうすることで、円グラフで貢献度を表示できる。",
    "acceptance": ["dashboard.getContribution実装", "期間フィルタリング", "チームメンバーのポイント集計", "貢献度割合計算"],
    "dependencies": ["US-030"]
  },
  {
    "id": "US-033",
    "title": "ダッシュボード画面",
    "sprint": "Sprint-3",
    "epic": "ダッシュボード",
    "priority": "P0",
    "points": 8,
    "story": "ユーザーとして、チームの貢献度とランキングを確認したい。そうすることで、家事分担のバランスを把握できる。",
    "acceptance": ["/app/dashboardページ作成", "期間選択タブ実装", "円グラフ表示（Recharts）", "ランキングリスト表示", "tRPC呼び出し", "レスポンシブデザイン"],
    "dependencies": ["US-031", "US-032"]
  },
  {
    "id": "US-034",
    "title": "家事記録履歴取得API実装",
    "sprint": "Sprint-3",
    "epic": "家事記録",
    "priority": "P2",
    "points": 3,
    "story": "バックエンド開発者として、家事記録履歴取得APIを実装したい。そうすることで、過去の記録を閲覧できる。",
    "acceptance": ["choreLog.list実装", "期間フィルタリング", "ユーザー指定", "チームメンバーのみアクセス可能"],
    "dependencies": []
  },
  {
    "id": "US-035",
    "title": "バックエンドユニットテスト実装",
    "sprint": "Sprint-4",
    "epic": "テスト・品質保証",
    "priority": "P0",
    "points": 8,
    "story": "開発者として、バックエンドのユニットテストを作成したい。そうすることで、コードの品質を保証できる。",
    "acceptance": ["Vitest設定完了", "ユーティリティ関数のテスト", "tRPCルーターの統合テスト", "カバレッジ85%以上達成", "CIで自動実行"],
    "dependencies": []
  },
  {
    "id": "US-036",
    "title": "フロントエンドユニットテスト実装",
    "sprint": "Sprint-4",
    "epic": "テスト・品質保証",
    "priority": "P0",
    "points": 8,
    "story": "開発者として、フロントエンドのユニットテストを作成したい。そうすることで、UIコンポーネントの品質を保証できる。",
    "acceptance": ["Vitest + React Testing Library設定", "主要コンポーネントのテスト作成", "カバレッジ75%以上達成", "CIで自動実行"],
    "dependencies": []
  },
  {
    "id": "US-037",
    "title": "GitHub Actions CI設定（バックエンド）",
    "sprint": "Sprint-4",
    "epic": "CI/CD・デプロイ",
    "priority": "P0",
    "points": 5,
    "story": "開発者として、バックエンドのCIを構築したい。そうすることで、コード品質を自動チェックできる。",
    "acceptance": [".github/workflows/backend-ci.yml作成", "Lint、Test、Coverage実行", "PRでCI自動実行", "mainブランチプッシュでCI実行"],
    "dependencies": []
  },
  {
    "id": "US-038",
    "title": "GitHub Actions CI設定（フロントエンド）",
    "sprint": "Sprint-4",
    "epic": "CI/CD・デプロイ",
    "priority": "P0",
    "points": 5,
    "story": "開発者として、フロントエンドのCIを構築したい。そうすることで、コード品質を自動チェックできる。",
    "acceptance": [".github/workflows/frontend-ci.yml作成", "Lint、Test、Coverage実行", "PRでCI自動実行", "mainブランチプッシュでCI実行"],
    "dependencies": []
  },
  {
    "id": "US-039",
    "title": "AWS CDK Database Stack実装",
    "sprint": "Sprint-4",
    "epic": "CI/CD・デプロイ",
    "priority": "P0",
    "points": 5,
    "story": "開発者として、RDSをCDKでデプロイしたい。そうすることで、本番環境のデータベースを構築できる。",
    "acceptance": ["infra/lib/database-stack.ts作成", "VPC設定", "RDS PostgreSQL設定", "セキュリティグループ設定", "デプロイ成功"],
    "dependencies": []
  },
  {
    "id": "US-040",
    "title": "AWS CDK Backend Stack実装",
    "sprint": "Sprint-4",
    "epic": "CI/CD・デプロイ",
    "priority": "P0",
    "points": 5,
    "story": "開発者として、Lambda + API GatewayをCDKでデプロイしたい。そうすることで、バックエンドAPIを公開できる。",
    "acceptance": ["infra/lib/backend-stack.ts作成", "Lambda関数定義", "API Gateway設定", "環境変数設定", "デプロイ成功"],
    "dependencies": ["US-039"]
  },
  {
    "id": "US-041",
    "title": "AWS CDK Frontend Stack実装",
    "sprint": "Sprint-4",
    "epic": "CI/CD・デプロイ",
    "priority": "P0",
    "points": 5,
    "story": "開発者として、S3 + CloudFrontをCDKでデプロイしたい。そうすることで、フロントエンドを公開できる。",
    "acceptance": ["infra/lib/frontend-stack.ts作成", "S3バケット設定", "CloudFront Distribution設定", "SPA対応", "デプロイ成功"],
    "dependencies": []
  },
  {
    "id": "US-042",
    "title": "GitHub Actions CD設定（バックエンド）",
    "sprint": "Sprint-4",
    "epic": "CI/CD・デプロイ",
    "priority": "P1",
    "points": 5,
    "story": "開発者として、バックエンドのCDを構築したい。そうすることで、mainブランチへのマージで自動デプロイできる。",
    "acceptance": ["backend-ci.ymlにdeployジョブ追加", "mainブランチのみデプロイ実行", "ビルド→CDKデプロイ", "AWS認証情報をSecretsで管理"],
    "dependencies": ["US-037", "US-040"]
  },
  {
    "id": "US-043",
    "title": "GitHub Actions CD設定（フロントエンド）",
    "sprint": "Sprint-4",
    "epic": "CI/CD・デプロイ",
    "priority": "P1",
    "points": 5,
    "story": "開発者として、フロントエンドのCDを構築したい。そうすることで、mainブランチへのマージで自動デプロイできる。",
    "acceptance": ["frontend-ci.ymlにdeployジョブ追加", "mainブランチのみデプロイ実行", "ビルド→CDKデプロイ", "環境変数設定"],
    "dependencies": ["US-038", "US-041"]
  },
  {
    "id": "US-044",
    "title": "エラーハンドリング実装",
    "sprint": "Sprint-4",
    "epic": "テスト・品質保証",
    "priority": "P1",
    "points": 3,
    "story": "開発者として、適切なエラーハンドリングを実装したい。そうすることで、ユーザーにわかりやすいエラーメッセージを表示できる。",
    "acceptance": ["バックエンドでtRPCErrorハンドリング実装", "PrismaエラーをtRPCErrorに変換", "フロントエンドでトースト通知表示", "React Query onError設定"],
    "dependencies": []
  },
  {
    "id": "US-045",
    "title": "レスポンシブデザイン対応",
    "sprint": "Sprint-4",
    "epic": "テスト・品質保証",
    "priority": "P1",
    "points": 5,
    "story": "ユーザーとして、スマートフォンでも快適に使いたい。そうすることで、どのデバイスでもアプリを利用できる。",
    "acceptance": ["全画面でレスポンシブ対応", "スマートフォンで表示確認", "タブレットで表示確認", "PCで表示確認", "Tailwind CSSのブレークポイント使用"],
    "dependencies": []
  },
  {
    "id": "US-046",
    "title": "パフォーマンス最適化",
    "sprint": "Sprint-4",
    "epic": "テスト・品質保証",
    "priority": "P2",
    "points": 5,
    "story": "開発者として、アプリのパフォーマンスを最適化したい。そうすることで、高速で快適なUXを提供できる。",
    "acceptance": ["React.lazy + Suspense でコード分割", "React Query staleTime設定", "画像最適化", "Lighthouseスコア80以上"],
    "dependencies": []
  },
  {
    "id": "US-047",
    "title": "本番環境デプロイ",
    "sprint": "Sprint-4",
    "epic": "CI/CD・デプロイ",
    "priority": "P0",
    "points": 8,
    "story": "開発者として、本番環境にデプロイしたい。そうすることで、ユーザーにアプリを提供できる。",
    "acceptance": ["Cognito User Pool本番環境作成", "RDS本番環境作成", "Lambda + API Gateway本番環境デプロイ", "S3 + CloudFront本番環境デプロイ", "データベースマイグレーション実行", "動作確認完了"],
    "dependencies": ["US-039", "US-040", "US-041"]
  },
  {
    "id": "US-048",
    "title": "ドキュメント整備",
    "sprint": "Sprint-4",
    "epic": "テスト・品質保証",
    "priority": "P2",
    "points": 3,
    "story": "開発者として、ドキュメントを整備したい。そうすることで、チームメンバーが理解しやすくなる。",
    "acceptance": ["各パッケージのREADME作成", "セットアップ手順記載", "環境変数の説明", "デプロイ手順記載"],
    "dependencies": []
  }
]
